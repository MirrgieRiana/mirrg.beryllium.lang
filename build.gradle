apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

project.group = 'mirrg'
project.archivesBaseName = 'mirrg.beryllium.lang'
version = '2.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(AbstractCompile)*.options*.encoding = 'UTF-8'
tasks.withType(GroovyCompile)*.groovyOptions*.encoding = 'UTF-8'

def mavenRootDir = '../' * (project.group.count('.') + 2)

// 依存関係

// 成果物

jar {
	manifest {
		attributes 'Implementation-Title': 'Gradle Quickstart'
		attributes 'Implementation-Version': version
	}
}

task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

javadoc {
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

repositories {
	mavenCentral()

	maven { url mavenRootDir }

	//maven { url 'https://raw.githubusercontent.com/MirrgieRiana/mirrg.lithium/master/maven' }
	//maven { url 'https://mirrgieriana.github.io/mirrg.beryllium/' }
}

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.+'

	//compile group: 'mirrg', name: 'mirrg.beryllium.template', version: '0.0+'
}

uploadArchives {
	repositories {

		mavenDeployer {
			pom.artifactId = project.archivesBaseName
			repository(url: 'file://localhost/' + file(mavenRootDir).getAbsolutePath())
		}

	}
}

//////////////////////////// その他

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}

/*
// Java 9 MJigsaw対応
// GradleがJigsawに対応するまで保留

compileJava {
    doFirst {
        options.compilerArgs = [
            "--module-path", classpath.asPath
        ]
        //classpath = files()
    }
}

compileTestJava {
    doFirst {
        options.compilerArgs = [
            "--module-path", classpath.asPath,
            "--add-modules", junitModuleName,
            "--patch-module", "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
            "--add-reads", "$moduleName=$junitModuleName"
        ]
        //classpath = files()
    }
}

apply plugin: 'eclipse'

eclipse {
    classpath {
        file {
            whenMerged {
                entries.findAll {
                    it.kind == 'src' || it.kind == 'lib'
                }.each { it.entryAttributes['module'] = 'true' }
            }
        }
    }
}
*/
